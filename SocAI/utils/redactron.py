import json
import logging
import re
from faker import Faker


def extract_sensitive_information(data: str):
    """
    Scans the values in a dictionary using regular expressions to find email addresses, public IP addresses and domains.
    """
    ip_pattern = r"\b(?:\d{1,3}\.){3}\d{1,3}\b"
    domain_pattern = r"/^(?:https?:)?(?:\/\/)?(?:[^@\n]+@)?(?:www\.)?([^:\/\n]+)/im"
    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'

    ips = re.findall(ip_pattern, data)
    domains = re.findall(domain_pattern, data)
    emails = re.findall(email_pattern, data)

    return {
        'ip': ips,
        'domain': domains,
        'email': emails
    }


def replace_with_fake_elements(data_dict: [dict, list], sensitive_information):
    """
    Replaces them with an autogenerated value while preserving the original format.
    """
    replaces = {}
    try:
        fake = Faker()

        string_format = json.dumps(data_dict)

    # For IPs
        for match in sensitive_information['ip']:
            replaces[match] = fake.ipv4_public()
    # For emails
        for match in sensitive_information['email']:
            replaces[match] = fake.safe_email()

    # For domains
        for match in sensitive_information['domain']:
            replaces[match] = fake.domain_name()

        for key, value in replaces.items():
            string_format = string_format.replace(key, value)

        return json.loads(string_format), replaces

    except Exception as e:
        logging.error(e)
